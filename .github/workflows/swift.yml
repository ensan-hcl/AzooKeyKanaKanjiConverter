# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift Build and Test
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  macos-build:
    name: Swift ${{ matrix.swift-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        swift-version: ["5.9", "5.10", "6.0"]
    steps:
    - uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift-version }}
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Build
      run: swift build -Xswiftc -strict-concurrency=complete -Xcxx -xobjective-c++ -v
    - name: Run tests
      run: swift test -c release -Xswiftc -strict-concurrency=complete -Xcxx -xobjective-c++ -v
  ubuntu-build:
      name: Swift ${{ matrix.swift-version }} on ${{ matrix.os }}
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          os: [ubuntu-latest]
          swift-version: ["5.9", "5.10", "6.0"]
      steps:
      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ matrix.swift-version }}
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build
        run: swift build -Xswiftc -strict-concurrency=complete -v
      - name: Run tests
        run: swift test -c release -Xswiftc -strict-concurrency=complete -v
  windows-build:
      name: Swift ${{ matrix.swift-version.tag }} on ${{ matrix.os }}
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          os: [windows-latest]
          swift-version: [{
            branch: "swift-6.0.1-release",
            tag: "6.0.1-RELEASE"
          }]
      steps:
      - uses: compnerd/gha-setup-swift@main
        with:
          branch: ${{ matrix.swift-version.branch }}
          tag: ${{ matrix.swift-version.tag }}
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Clone llama.cpp
        run: git clone -b ku-nlp/gpt2-japanese-char https://github.com/ensan-hcl/llama.cpp.git
      - name: Build llama.cpp
        run: |
          cmake -B build -DBUILD_SHARED_LIBS=ON
          cmake --build build --config Release
        working-directory: ./llama.cpp
      - name: Copy built files
        run: |
          cp ./build/bin/Release/llama.dll ../
          cp ./build/Release/llama.lib ../
        working-directory: ./llama.cpp
      - name: Build
        run: swift build -Xswiftc -strict-concurrency=complete -v
      - name: Run tests
        run: swift test -c release -Xswiftc -strict-concurrency=complete -v
  
